// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

/*
Package node is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	Info
	Void
	Site
	SuccessReturn
*/
package node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Info struct {
	Version         string   `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Length          uint64   `protobuf:"varint,2,opt,name=Length" json:"Length,omitempty"`
	ListenInterface string   `protobuf:"bytes,3,opt,name=ListenInterface" json:"ListenInterface,omitempty"`
	Connections     []string `protobuf:"bytes,4,rep,name=Connections" json:"Connections,omitempty"`
	Hashes          [][]byte `protobuf:"bytes,5,rep,name=Hashes,proto3" json:"Hashes,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Info) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Info) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Info) GetListenInterface() string {
	if m != nil {
		return m.ListenInterface
	}
	return ""
}

func (m *Info) GetConnections() []string {
	if m != nil {
		return m.Connections
	}
	return nil
}

func (m *Info) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Site struct {
	Validates [][]byte `protobuf:"bytes,1,rep,name=Validates,proto3" json:"Validates,omitempty"`
	Nonce     uint64   `protobuf:"varint,2,opt,name=Nonce" json:"Nonce,omitempty"`
	Content   []byte   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Type      string   `protobuf:"bytes,4,opt,name=Type" json:"Type,omitempty"`
	Data      []byte   `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Tip       bool     `protobuf:"varint,6,opt,name=Tip" json:"Tip,omitempty"`
}

func (m *Site) Reset()                    { *m = Site{} }
func (m *Site) String() string            { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()               {}
func (*Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Site) GetValidates() [][]byte {
	if m != nil {
		return m.Validates
	}
	return nil
}

func (m *Site) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Site) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Site) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Site) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Site) GetTip() bool {
	if m != nil {
		return m.Tip
	}
	return false
}

type SuccessReturn struct {
}

func (m *SuccessReturn) Reset()                    { *m = SuccessReturn{} }
func (m *SuccessReturn) String() string            { return proto.CompactTextString(m) }
func (*SuccessReturn) ProtoMessage()               {}
func (*SuccessReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Info)(nil), "Info")
	proto.RegisterType((*Void)(nil), "Void")
	proto.RegisterType((*Site)(nil), "Site")
	proto.RegisterType((*SuccessReturn)(nil), "SuccessReturn")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DistributionService service

type DistributionServiceClient interface {
	GetInfo(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Info, error)
	AddSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*SuccessReturn, error)
	Splice(ctx context.Context, opts ...grpc.CallOption) (DistributionService_SpliceClient, error)
}

type distributionServiceClient struct {
	cc *grpc.ClientConn
}

func NewDistributionServiceClient(cc *grpc.ClientConn) DistributionServiceClient {
	return &distributionServiceClient{cc}
}

func (c *distributionServiceClient) GetInfo(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/DistributionService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionServiceClient) AddSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*SuccessReturn, error) {
	out := new(SuccessReturn)
	err := grpc.Invoke(ctx, "/DistributionService/AddSite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionServiceClient) Splice(ctx context.Context, opts ...grpc.CallOption) (DistributionService_SpliceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DistributionService_serviceDesc.Streams[0], c.cc, "/DistributionService/Splice", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributionServiceSpliceClient{stream}
	return x, nil
}

type DistributionService_SpliceClient interface {
	Send(*Site) error
	CloseAndRecv() (*SuccessReturn, error)
	grpc.ClientStream
}

type distributionServiceSpliceClient struct {
	grpc.ClientStream
}

func (x *distributionServiceSpliceClient) Send(m *Site) error {
	return x.ClientStream.SendMsg(m)
}

func (x *distributionServiceSpliceClient) CloseAndRecv() (*SuccessReturn, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SuccessReturn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DistributionService service

type DistributionServiceServer interface {
	GetInfo(context.Context, *Info) (*Info, error)
	AddSite(context.Context, *Site) (*SuccessReturn, error)
	Splice(DistributionService_SpliceServer) error
}

func RegisterDistributionServiceServer(s *grpc.Server, srv DistributionServiceServer) {
	s.RegisterService(&_DistributionService_serviceDesc, srv)
}

func _DistributionService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Info)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributionService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServiceServer).GetInfo(ctx, req.(*Info))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionService_AddSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServiceServer).AddSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributionService/AddSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServiceServer).AddSite(ctx, req.(*Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionService_Splice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DistributionServiceServer).Splice(&distributionServiceSpliceServer{stream})
}

type DistributionService_SpliceServer interface {
	SendAndClose(*SuccessReturn) error
	Recv() (*Site, error)
	grpc.ServerStream
}

type distributionServiceSpliceServer struct {
	grpc.ServerStream
}

func (x *distributionServiceSpliceServer) SendAndClose(m *SuccessReturn) error {
	return x.ServerStream.SendMsg(m)
}

func (x *distributionServiceSpliceServer) Recv() (*Site, error) {
	m := new(Site)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DistributionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DistributionService",
	HandlerType: (*DistributionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _DistributionService_GetInfo_Handler,
		},
		{
			MethodName: "AddSite",
			Handler:    _DistributionService_AddSite_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Splice",
			Handler:       _DistributionService_Splice_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xcb, 0x6a, 0xeb, 0x30,
	0x14, 0x8c, 0xae, 0x65, 0xe7, 0xe6, 0xdc, 0xdc, 0xa6, 0xa8, 0xa5, 0xa8, 0xa1, 0x0b, 0xa3, 0x6e,
	0xb4, 0xf2, 0xa2, 0xfd, 0x82, 0x92, 0x40, 0x1b, 0x08, 0x5d, 0xc8, 0x21, 0x7b, 0xc7, 0x3e, 0x69,
	0x04, 0x41, 0x32, 0x96, 0x52, 0xc8, 0x4f, 0xf4, 0x0b, 0xfa, 0xb1, 0x45, 0x4a, 0x42, 0x1f, 0xd0,
	0xd5, 0x99, 0x19, 0x46, 0x47, 0x33, 0x12, 0x80, 0xb1, 0x0d, 0x16, 0x6d, 0x67, 0xbd, 0x15, 0xef,
	0x04, 0xe8, 0xcc, 0xac, 0x2d, 0xe3, 0xd0, 0x5f, 0x62, 0xe7, 0xb4, 0x35, 0x9c, 0xe4, 0x44, 0x0e,
	0xd4, 0x89, 0xb2, 0x2b, 0xc8, 0xe6, 0x68, 0x5e, 0xfc, 0x86, 0xff, 0xc9, 0x89, 0xa4, 0xea, 0xc8,
	0x98, 0x84, 0xd1, 0x5c, 0x3b, 0x8f, 0x66, 0x66, 0x3c, 0x76, 0xeb, 0xaa, 0x46, 0x9e, 0xc4, 0x93,
	0x3f, 0x65, 0x96, 0xc3, 0xbf, 0x89, 0x35, 0x06, 0x6b, 0xaf, 0xad, 0x71, 0x9c, 0xe6, 0x89, 0x1c,
	0xa8, 0xaf, 0x52, 0xb8, 0xe3, 0xa9, 0x72, 0x1b, 0x74, 0x3c, 0xcd, 0x13, 0x39, 0x54, 0x47, 0x26,
	0x32, 0xa0, 0x4b, 0xab, 0x1b, 0xf1, 0x46, 0x80, 0x96, 0xda, 0x23, 0xbb, 0x81, 0xc1, 0xb2, 0xda,
	0xea, 0xa6, 0xf2, 0xe8, 0x38, 0x89, 0xde, 0x4f, 0x81, 0x5d, 0x42, 0xfa, 0x6c, 0x4d, 0x8d, 0xc7,
	0xa4, 0x07, 0x12, 0xaa, 0x4d, 0xac, 0xf1, 0x68, 0x7c, 0x0c, 0x38, 0x54, 0x27, 0xca, 0x18, 0xd0,
	0xc5, 0xbe, 0x45, 0x4e, 0x63, 0xee, 0x88, 0x83, 0x36, 0xad, 0x7c, 0xc5, 0xd3, 0x68, 0x8d, 0x98,
	0x9d, 0x43, 0xb2, 0xd0, 0x2d, 0xcf, 0x72, 0x22, 0xff, 0xaa, 0x00, 0xc5, 0x08, 0xfe, 0x97, 0xbb,
	0xba, 0x46, 0xe7, 0x14, 0xfa, 0x5d, 0x67, 0xee, 0xf6, 0x70, 0x31, 0xd5, 0xce, 0x77, 0x7a, 0xb5,
	0x0b, 0x95, 0x4a, 0xec, 0x5e, 0x75, 0x8d, 0xec, 0x1a, 0xfa, 0x8f, 0xe8, 0xe3, 0x0b, 0xa7, 0x45,
	0x18, 0xe3, 0xc3, 0x10, 0x3d, 0x26, 0xa0, 0xff, 0xd0, 0x34, 0xb1, 0x55, 0x5a, 0x84, 0x31, 0x3e,
	0x2b, 0xbe, 0xed, 0x14, 0x3d, 0x76, 0x0b, 0x59, 0xd9, 0x6e, 0xc3, 0xa2, 0xdf, 0x2c, 0x92, 0xac,
	0xb2, 0xf8, 0x95, 0xf7, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0x70, 0x01, 0x73, 0xd8, 0x01,
	0x00, 0x00,
}
